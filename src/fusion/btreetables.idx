Table	src/fusion/btreetables.html#Table	btreetables: Table	
TableRef	src/fusion/btreetables.html#TableRef	btreetables: TableRef	
initTable	src/fusion/btreetables.html#initTable,int	btreetables: initTable[A, B](initialSize = 0): Table[A, B]	
toTable	src/fusion/btreetables.html#toTable,openArray[]	btreetables: toTable[A, B](pairs: openArray[(A, B)]): Table[A, B]	
getOrDefault	src/fusion/btreetables.html#getOrDefault,Table[A,B],A	btreetables: getOrDefault[A, B](t: Table[A, B]; x: A): B	
getOrDefault	src/fusion/btreetables.html#getOrDefault,Table[A,B],A,B	btreetables: getOrDefault[A, B](t: Table[A, B]; x: A; default: B): B	
`[]`	src/fusion/btreetables.html#[],Table[A,B],A	btreetables: `[]`[A, B](t: Table[A, B]; x: A): B	
`[]`	src/fusion/btreetables.html#[],Table[A,B],A_2	btreetables: `[]`[A, B](t: var Table[A, B]; x: A): var B	
hasKey	src/fusion/btreetables.html#hasKey,Table[A,B],A	btreetables: hasKey[A, B](t: Table[A, B]; x: A): bool	
contains	src/fusion/btreetables.html#contains,Table[A,B],A	btreetables: contains[A, B](t: Table[A, B]; x: A): bool	
`[]=`	src/fusion/btreetables.html#[]=,Table[A,B],A,B	btreetables: `[]=`[A, B](t: var Table[A, B]; key: A; val: B)	
hasKeyOrPut	src/fusion/btreetables.html#hasKeyOrPut,Table[A,B],A,B	btreetables: hasKeyOrPut[A, B](t: var Table[A, B]; key: A; val: B): bool	
mgetOrPut	src/fusion/btreetables.html#mgetOrPut,Table[A,B],A,B	btreetables: mgetOrPut[A, B](t: var Table[A, B]; key: A; val: B): var B	
del	src/fusion/btreetables.html#del,Table[A,B],A	btreetables: del[A, B](t: var Table[A, B]; key: A)	
pop	src/fusion/btreetables.html#pop,Table[A,B],A,B	btreetables: pop[A, B](t: var Table[A, B]; key: A; val: var B): bool	
take	src/fusion/btreetables.html#take,Table[A,B],A,B	btreetables: take[A, B](t: var Table[A, B]; key: A; val: var B): bool	
clear	src/fusion/btreetables.html#clear,Table[A,B]	btreetables: clear[A, B](t: var Table[A, B])	
len	src/fusion/btreetables.html#len,Table[A,B]	btreetables: len[A, B](t: Table[A, B]): int	
keys	src/fusion/btreetables.html#keys.i,Table[A,B]	btreetables: keys[A, B](t: Table[A, B]): A	
keysFrom	src/fusion/btreetables.html#keysFrom.i,Table[A,B],A	btreetables: keysFrom[A, B](b: Table[A, B]; fromKey: A): A	
keysBetween	src/fusion/btreetables.html#keysBetween.i,Table[A,B],A,A	btreetables: keysBetween[A, B](b: Table[A, B]; fromKey: A; toKey: A): A	
values	src/fusion/btreetables.html#values.i,Table[A,B]	btreetables: values[A, B](t: Table[A, B]): B	
mvalues	src/fusion/btreetables.html#mvalues.i,Table[A,B]	btreetables: mvalues[A, B](t: var Table[A, B]): var B	
valuesFrom	src/fusion/btreetables.html#valuesFrom.i,Table[A,B],A	btreetables: valuesFrom[A, B](b: Table[A, B]; fromKey: A): B	
valuesBetween	src/fusion/btreetables.html#valuesBetween.i,Table[A,B],A,A	btreetables: valuesBetween[A, B](b: Table[A, B]; fromKey: A; toKey: A): B	
pairs	src/fusion/btreetables.html#pairs.i,Table[A,B]	btreetables: pairs[A, B](t: Table[A, B]): (A, B)	
mpairs	src/fusion/btreetables.html#mpairs.i,Table[A,B]	btreetables: mpairs[A, B](t: var Table[A, B]): (A, var B)	
pairsFrom	src/fusion/btreetables.html#pairsFrom.i,Table[A,B],A	btreetables: pairsFrom[A, B](b: Table[A, B]; fromKey: A): tuple[key: A, val: B]	
pairsBetween	src/fusion/btreetables.html#pairsBetween.i,Table[A,B],A,A	btreetables: pairsBetween[A, B](b: Table[A, B]; fromKey: A; toKey: A): tuple[key: A, val: B]	
`$`	src/fusion/btreetables.html#$,Table[A,B]	btreetables: `$`[A, B](t: Table[A, B]): string	
`==`	src/fusion/btreetables.html#==,Table[A,B],Table[A,B]	btreetables: `==`[A, B](a, b: Table[A, B]): bool	
newTable	src/fusion/btreetables.html#newTable	btreetables: newTable[A, B](): TableRef[A, B]	
newTable	src/fusion/btreetables.html#newTable,openArray[]	btreetables: newTable[A, B](pairs: openArray[(A, B)]): TableRef[A, B]	
newTableFrom	src/fusion/btreetables.html#newTableFrom,A,proc(B)	btreetables: newTableFrom[A, B, C](collection: A; index: proc (x: B): C): TableRef[C, B]	
`[]`	src/fusion/btreetables.html#[],TableRef[A,B],A	btreetables: `[]`[A, B](t: TableRef[A, B]; key: A): var B	
`[]=`	src/fusion/btreetables.html#[]=,TableRef[A,B],A,B	btreetables: `[]=`[A, B](t: TableRef[A, B]; key: A; val: B)	
hasKey	src/fusion/btreetables.html#hasKey,TableRef[A,B],A	btreetables: hasKey[A, B](t: TableRef[A, B]; key: A): bool	
contains	src/fusion/btreetables.html#contains,TableRef[A,B],A	btreetables: contains[A, B](t: TableRef[A, B]; key: A): bool	
hasKeyOrPut	src/fusion/btreetables.html#hasKeyOrPut,TableRef[A,B],A,B	btreetables: hasKeyOrPut[A, B](t: var TableRef[A, B]; key: A; val: B): bool	
getOrDefault	src/fusion/btreetables.html#getOrDefault,TableRef[A,B],A	btreetables: getOrDefault[A, B](t: TableRef[A, B]; key: A): B	
getOrDefault	src/fusion/btreetables.html#getOrDefault,TableRef[A,B],A,B	btreetables: getOrDefault[A, B](t: TableRef[A, B]; key: A; default: B): B	
mgetOrPut	src/fusion/btreetables.html#mgetOrPut,TableRef[A,B],A,B	btreetables: mgetOrPut[A, B](t: TableRef[A, B]; key: A; val: B): var B	
len	src/fusion/btreetables.html#len,TableRef[A,B]	btreetables: len[A, B](t: TableRef[A, B]): int	
del	src/fusion/btreetables.html#del,TableRef[A,B],A	btreetables: del[A, B](t: TableRef[A, B]; key: A)	
pop	src/fusion/btreetables.html#pop,TableRef[A,B],A,B	btreetables: pop[A, B](t: TableRef[A, B]; key: A; val: var B): bool	
take	src/fusion/btreetables.html#take,TableRef[A,B],A,B	btreetables: take[A, B](t: TableRef[A, B]; key: A; val: var B): bool	
clear	src/fusion/btreetables.html#clear,TableRef[A,B]	btreetables: clear[A, B](t: TableRef[A, B])	
`$`	src/fusion/btreetables.html#$,TableRef[A,B]	btreetables: `$`[A, B](t: TableRef[A, B]): string	
`==`	src/fusion/btreetables.html#==,TableRef[A,B],TableRef[A,B]	btreetables: `==`[A, B](s, t: TableRef[A, B]): bool	
keys	src/fusion/btreetables.html#keys.i,TableRef[A,B]	btreetables: keys[A, B](t: TableRef[A, B]): A	
values	src/fusion/btreetables.html#values.i,TableRef[A,B]	btreetables: values[A, B](t: TableRef[A, B]): B	
mvalues	src/fusion/btreetables.html#mvalues.i,TableRef[A,B]	btreetables: mvalues[A, B](t: TableRef[A, B]): var B	
pairs	src/fusion/btreetables.html#pairs.i,TableRef[A,B]	btreetables: pairs[A, B](t: TableRef[A, B]): (A, B)	
mpairs	src/fusion/btreetables.html#mpairs.i,TableRef[A,B]	btreetables: mpairs[A, B](t: TableRef[A, B]): (A, var B)	
OrderedTable	src/fusion/btreetables.html#OrderedTable	btreetables: OrderedTable	
OrderedTableRef	src/fusion/btreetables.html#OrderedTableRef	btreetables: OrderedTableRef	
initOrderedTable	src/fusion/btreetables.html#initOrderedTable,int	btreetables: initOrderedTable[A, B](initialSize = 64): OrderedTable[A, B]	
`[]=`	src/fusion/btreetables.html#[]=,OrderedTable[A,B],A,B	btreetables: `[]=`[A, B](t: var OrderedTable[A, B]; k: A; v: B)	
toOrderedTable	src/fusion/btreetables.html#toOrderedTable,openArray[]	btreetables: toOrderedTable[A, B](pairs: openArray[(A, B)]): OrderedTable[A, B]	
`[]`	src/fusion/btreetables.html#[],OrderedTable[A,B],A	btreetables: `[]`[A, B](t: OrderedTable[A, B]; key: A): B	
`[]`	src/fusion/btreetables.html#[],OrderedTable[A,B],A_2	btreetables: `[]`[A, B](t: var OrderedTable[A, B]; key: A): var B	
hasKey	src/fusion/btreetables.html#hasKey,OrderedTable[A,B],A	btreetables: hasKey[A, B](t: OrderedTable[A, B]; key: A): bool	
contains	src/fusion/btreetables.html#contains,OrderedTable[A,B],A	btreetables: contains[A, B](t: OrderedTable[A, B]; key: A): bool	
hasKeyOrPut	src/fusion/btreetables.html#hasKeyOrPut,OrderedTable[A,B],A,B	btreetables: hasKeyOrPut[A, B](t: var OrderedTable[A, B]; key: A; val: B): bool	
getOrDefault	src/fusion/btreetables.html#getOrDefault,OrderedTable[A,B],A	btreetables: getOrDefault[A, B](t: OrderedTable[A, B]; key: A): B	
getOrDefault	src/fusion/btreetables.html#getOrDefault,OrderedTable[A,B],A,B	btreetables: getOrDefault[A, B](t: OrderedTable[A, B]; key: A; default: B): B	
mgetOrPut	src/fusion/btreetables.html#mgetOrPut,OrderedTable[A,B],A,B	btreetables: mgetOrPut[A, B](t: var OrderedTable[A, B]; key: A; val: B): var B	
len	src/fusion/btreetables.html#len,OrderedTable[A,B]	btreetables: len[A, B](t: OrderedTable[A, B]): int	
add	src/fusion/btreetables.html#add,OrderedTable[A,B],A,B	btreetables: add[A, B](t: var OrderedTable[A, B]; key: A; val: B)	
del	src/fusion/btreetables.html#del,OrderedTable[A,B],A	btreetables: del[A, B](t: var OrderedTable[A, B]; key: A)	
delete	src/fusion/btreetables.html#delete,OrderedTable[A,B],A	btreetables: delete[A, B](t: var OrderedTable[A, B]; key: A)	
pop	src/fusion/btreetables.html#pop,OrderedTable[A,B],A,B	btreetables: pop[A, B](t: var OrderedTable[A, B]; key: A; val: var B): bool	
clear	src/fusion/btreetables.html#clear,OrderedTable[A,B]	btreetables: clear[A, B](t: var OrderedTable[A, B])	
`$`	src/fusion/btreetables.html#$,OrderedTable[A,B]	btreetables: `$`[A, B](t: OrderedTable[A, B]): string	
`==`	src/fusion/btreetables.html#==,OrderedTable[A,B],OrderedTable[A,B]	btreetables: `==`[A, B](s, t: OrderedTable[A, B]): bool	
pairs	src/fusion/btreetables.html#pairs.i,OrderedTable[A,B]	btreetables: pairs[A, B](t: OrderedTable[A, B]): (A, B)	
mpairs	src/fusion/btreetables.html#mpairs.i,OrderedTable[A,B]	btreetables: mpairs[A, B](t: var OrderedTable[A, B]): (A, var B)	
keys	src/fusion/btreetables.html#keys.i,OrderedTable[A,B]	btreetables: keys[A, B](t: OrderedTable[A, B]): A	
values	src/fusion/btreetables.html#values.i,OrderedTable[A,B]	btreetables: values[A, B](t: OrderedTable[A, B]): B	
mvalues	src/fusion/btreetables.html#mvalues.i,OrderedTable[A,B]	btreetables: mvalues[A, B](t: var OrderedTable[A, B]): var B	
newOrderedTable	src/fusion/btreetables.html#newOrderedTable,int	btreetables: newOrderedTable[A, B](initialSize = 64): OrderedTableRef[A, B]	
newOrderedTable	src/fusion/btreetables.html#newOrderedTable,openArray[]	btreetables: newOrderedTable[A, B](pairs: openArray[(A, B)]): OrderedTableRef[A, B]	
`[]`	src/fusion/btreetables.html#[],OrderedTableRef[A,B],A	btreetables: `[]`[A, B](t: OrderedTableRef[A, B]; key: A): var B	
`[]=`	src/fusion/btreetables.html#[]=,OrderedTableRef[A,B],A,B	btreetables: `[]=`[A, B](t: OrderedTableRef[A, B]; key: A; val: B)	
hasKey	src/fusion/btreetables.html#hasKey,OrderedTableRef[A,B],A	btreetables: hasKey[A, B](t: OrderedTableRef[A, B]; key: A): bool	
contains	src/fusion/btreetables.html#contains,OrderedTableRef[A,B],A	btreetables: contains[A, B](t: OrderedTableRef[A, B]; key: A): bool	
hasKeyOrPut	src/fusion/btreetables.html#hasKeyOrPut,OrderedTableRef[A,B],A,B	btreetables: hasKeyOrPut[A, B](t: var OrderedTableRef[A, B]; key: A; val: B): bool	
getOrDefault	src/fusion/btreetables.html#getOrDefault,OrderedTableRef[A,B],A	btreetables: getOrDefault[A, B](t: OrderedTableRef[A, B]; key: A): B	
getOrDefault	src/fusion/btreetables.html#getOrDefault,OrderedTableRef[A,B],A,B	btreetables: getOrDefault[A, B](t: OrderedTableRef[A, B]; key: A; default: B): B	
mgetOrPut	src/fusion/btreetables.html#mgetOrPut,OrderedTableRef[A,B],A,B	btreetables: mgetOrPut[A, B](t: OrderedTableRef[A, B]; key: A; val: B): var B	
len	src/fusion/btreetables.html#len,OrderedTableRef[A,B]	btreetables: len[A, B](t: OrderedTableRef[A, B]): int	
del	src/fusion/btreetables.html#del,OrderedTableRef[A,B],A	btreetables: del[A, B](t: OrderedTableRef[A, B]; key: A)	
delete	src/fusion/btreetables.html#delete,OrderedTableRef[A,B],A	btreetables: delete[A, B](t: OrderedTableRef[A, B]; key: A)	
pop	src/fusion/btreetables.html#pop,OrderedTableRef[A,B],A,B	btreetables: pop[A, B](t: OrderedTableRef[A, B]; key: A; val: var B): bool	
clear	src/fusion/btreetables.html#clear,OrderedTableRef[A,B]	btreetables: clear[A, B](t: OrderedTableRef[A, B])	
`$`	src/fusion/btreetables.html#$,OrderedTableRef[A,B]	btreetables: `$`[A, B](t: OrderedTableRef[A, B]): string	
`==`	src/fusion/btreetables.html#==,OrderedTableRef[A,B],OrderedTableRef[A,B]	btreetables: `==`[A, B](s, t: OrderedTableRef[A, B]): bool	
keys	src/fusion/btreetables.html#keys.i,OrderedTableRef[A,B]	btreetables: keys[A, B](t: OrderedTableRef[A, B]): A	
values	src/fusion/btreetables.html#values.i,OrderedTableRef[A,B]	btreetables: values[A, B](t: OrderedTableRef[A, B]): B	
mvalues	src/fusion/btreetables.html#mvalues.i,OrderedTableRef[A,B]	btreetables: mvalues[A, B](t: OrderedTableRef[A, B]): var B	
pairs	src/fusion/btreetables.html#pairs.i,OrderedTableRef[A,B]	btreetables: pairs[A, B](t: OrderedTableRef[A, B]): (A, B)	
mpairs	src/fusion/btreetables.html#mpairs.i,OrderedTableRef[A,B]	btreetables: mpairs[A, B](t: OrderedTableRef[A, B]): (A, var B)	
CountTable	src/fusion/btreetables.html#CountTable	btreetables: CountTable	
CountTableRef	src/fusion/btreetables.html#CountTableRef	btreetables: CountTableRef	
initCountTable	src/fusion/btreetables.html#initCountTable,int	btreetables: initCountTable[A](initialSize = 64): CountTable[A]	
toCountTable	src/fusion/btreetables.html#toCountTable,openArray[A]	btreetables: toCountTable[A](keys: openArray[A]): CountTable[A]	
`[]`	src/fusion/btreetables.html#[],CountTable[A],A	btreetables: `[]`[A](t: CountTable[A]; key: A): int	
`[]=`	src/fusion/btreetables.html#[]=,CountTable[A],A,int	btreetables: `[]=`[A](t: var CountTable[A]; key: A; val: int)	
inc	src/fusion/btreetables.html#inc,CountTable[A],A,Positive	btreetables: inc[A](t: var CountTable[A]; key: A; val: Positive = 1)	
smallest	src/fusion/btreetables.html#smallest,CountTable[A]	btreetables: smallest[A](t: CountTable[A]): tuple[key: A, val: int]	
largest	src/fusion/btreetables.html#largest,CountTable[A]	btreetables: largest[A](t: CountTable[A]): tuple[key: A, val: int]	
hasKey	src/fusion/btreetables.html#hasKey,CountTable[A],A	btreetables: hasKey[A](t: CountTable[A]; key: A): bool	
contains	src/fusion/btreetables.html#contains,CountTable[A],A	btreetables: contains[A](t: CountTable[A]; key: A): bool	
getOrDefault	src/fusion/btreetables.html#getOrDefault,CountTable[A],A,int	btreetables: getOrDefault[A](t: CountTable[A]; key: A; default: int = 0): int	
len	src/fusion/btreetables.html#len,CountTable[A]	btreetables: len[A](t: CountTable[A]): int	
del	src/fusion/btreetables.html#del,CountTable[A],A	btreetables: del[A](t: var CountTable[A]; key: A)	
pop	src/fusion/btreetables.html#pop,CountTable[A],A,int	btreetables: pop[A](t: var CountTable[A]; key: A; val: var int): bool	
clear	src/fusion/btreetables.html#clear,CountTable[A]	btreetables: clear[A](t: var CountTable[A])	
merge	src/fusion/btreetables.html#merge,CountTable[A],CountTable[A]	btreetables: merge[A](s: var CountTable[A]; t: CountTable[A])	
`$`	src/fusion/btreetables.html#$,CountTable[A]	btreetables: `$`[A](t: CountTable[A]): string	
`==`	src/fusion/btreetables.html#==,CountTable[A],CountTable[A]	btreetables: `==`[A](s, t: CountTable[A]): bool	
pairs	src/fusion/btreetables.html#pairs.i,CountTable[A]	btreetables: pairs[A](t: CountTable[A]): (A, int)	
mpairs	src/fusion/btreetables.html#mpairs.i,CountTable[A]	btreetables: mpairs[A](t: var CountTable[A]): (A, var int)	
keys	src/fusion/btreetables.html#keys.i,CountTable[A]	btreetables: keys[A](t: CountTable[A]): A	
values	src/fusion/btreetables.html#values.i,CountTable[A]	btreetables: values[A](t: CountTable[A]): int	
mvalues	src/fusion/btreetables.html#mvalues.i,CountTable[A]	btreetables: mvalues[A](t: var CountTable[A]): var int	
newCountTable	src/fusion/btreetables.html#newCountTable,int	btreetables: newCountTable[A](initialSize = 64): CountTableRef[A]	
newCountTable	src/fusion/btreetables.html#newCountTable,openArray[A]	btreetables: newCountTable[A](keys: openArray[A]): CountTableRef[A]	
`[]`	src/fusion/btreetables.html#[],CountTableRef[A],A	btreetables: `[]`[A](t: CountTableRef[A]; key: A): int	
`[]=`	src/fusion/btreetables.html#[]=,CountTableRef[A],A,int	btreetables: `[]=`[A](t: CountTableRef[A]; key: A; val: int)	
inc	src/fusion/btreetables.html#inc,CountTableRef[A],A,int	btreetables: inc[A](t: CountTableRef[A]; key: A; val = 1)	
smallest	src/fusion/btreetables.html#smallest,CountTableRef[A]	btreetables: smallest[A](t: CountTableRef[A]): (A, int)	
largest	src/fusion/btreetables.html#largest,CountTableRef[A]	btreetables: largest[A](t: CountTableRef[A]): (A, int)	
hasKey	src/fusion/btreetables.html#hasKey,CountTableRef[A],A	btreetables: hasKey[A](t: CountTableRef[A]; key: A): bool	
contains	src/fusion/btreetables.html#contains,CountTableRef[A],A	btreetables: contains[A](t: CountTableRef[A]; key: A): bool	
getOrDefault	src/fusion/btreetables.html#getOrDefault,CountTableRef[A],A,int	btreetables: getOrDefault[A](t: CountTableRef[A]; key: A; default: int): int	
len	src/fusion/btreetables.html#len,CountTableRef[A]	btreetables: len[A](t: CountTableRef[A]): int	
del	src/fusion/btreetables.html#del,CountTableRef[A],A	btreetables: del[A](t: CountTableRef[A]; key: A)	
pop	src/fusion/btreetables.html#pop,CountTableRef[A],A,int	btreetables: pop[A](t: CountTableRef[A]; key: A; val: var int): bool	
clear	src/fusion/btreetables.html#clear,CountTableRef[A]	btreetables: clear[A](t: CountTableRef[A])	
merge	src/fusion/btreetables.html#merge,CountTableRef[A],CountTableRef[A]	btreetables: merge[A](s, t: CountTableRef[A])	
`$`	src/fusion/btreetables.html#$,CountTableRef[A]	btreetables: `$`[A](t: CountTableRef[A]): string	
`==`	src/fusion/btreetables.html#==,CountTableRef[A],CountTableRef[A]	btreetables: `==`[A](s, t: CountTableRef[A]): bool	
keys	src/fusion/btreetables.html#keys.i,CountTableRef[A]	btreetables: keys[A](t: CountTableRef[A]): A	
values	src/fusion/btreetables.html#values.i,CountTableRef[A]	btreetables: values[A](t: CountTableRef[A]): int	
mvalues	src/fusion/btreetables.html#mvalues.i,CountTableRef[A]	btreetables: mvalues[A](t: CountTableRef[A]): var int	
pairs	src/fusion/btreetables.html#pairs.i,CountTableRef[A]	btreetables: pairs[A](t: CountTableRef[A]): (A, int)	
mpairs	src/fusion/btreetables.html#mpairs.i,CountTableRef[A]	btreetables: mpairs[A](t: CountTableRef[A]): (A, var int)	
